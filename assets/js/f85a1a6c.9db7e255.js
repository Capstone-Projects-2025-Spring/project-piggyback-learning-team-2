"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6244],{24553:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"testing/unit-testing","title":"Unit tests","description":"Unit Testing Frameworks","source":"@site/docs/testing/unit-testing.md","sourceDirName":"testing","slug":"/testing/unit-testing","permalink":"/project-piggyback-learning-team-2/docs/testing/unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Spring/project-piggyback-learning-team-2/edit/main/documentation/docs/testing/unit-testing.md","tags":[],"version":"current","lastUpdatedBy":"TonyGao777","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Test Procedures","permalink":"/project-piggyback-learning-team-2/docs/category/test-procedures"},"next":{"title":"Integration Testing","permalink":"/project-piggyback-learning-team-2/docs/testing/integration-testing"}}');var a=s(74848),r=s(28453);const i={sidebar_position:1},o="Unit tests",d={},c=[{value:"Unit Testing Frameworks",id:"unit-testing-frameworks",level:2},{value:"Backend Components",id:"backend-components",level:2},{value:"API Endpoints:",id:"api-endpoints",level:3},{value:"Example:",id:"example",level:4},{value:"Database Operations:",id:"database-operations",level:3},{value:"Example:",id:"example-1",level:4},{value:"Business Logic:",id:"business-logic",level:3},{value:"Example:",id:"example-2",level:4},{value:"Frontend Components",id:"frontend-components",level:2},{value:"React Components:",id:"react-components",level:3},{value:"Example:",id:"example-3",level:4},{value:"State Management:",id:"state-management",level:3},{value:"Example:",id:"example-4",level:4},{value:"API Integration:",id:"api-integration",level:3},{value:"Example:",id:"example-5",level:4}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"unit-tests",children:"Unit tests"})}),"\n",(0,a.jsx)(n.h2,{id:"unit-testing-frameworks",children:"Unit Testing Frameworks"}),"\n",(0,a.jsx)(n.p,{children:"For the backend, we will use Pytest, a widely adopted testing framework in the Python ecosystem, due to its simplicity and powerful features. For the frontend, we will use Jest, a popular JavaScript testing framework, to test React components and JavaScript logic. FastAPI\u2019s TestClient will also be used to test API endpoints in isolation."}),"\n",(0,a.jsx)(n.h2,{id:"backend-components",children:"Backend Components"}),"\n",(0,a.jsx)(n.h3,{id:"api-endpoints",children:"API Endpoints:"}),"\n",(0,a.jsx)(n.p,{children:"Ensure that all API endpoints return the correct status codes and responses for valid and invalid inputs."}),"\n",(0,a.jsx)(n.p,{children:"Test edge cases, such as missing required fields or invalid data types."}),"\n",(0,a.jsx)(n.h4,{id:"example",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'    def test_register_endpoint():\n        response = client.post("/register", json={\n            "username": "test_user",\n            "email": "test@example.com",\n            "password": "securepassword123"\n        })\n        assert response.status_code == 200\n        assert response.json() == {"message": "Account created successfully"}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"database-operations",children:"Database Operations:"}),"\n",(0,a.jsx)(n.p,{children:"Verify that data is correctly saved, retrieved, updated, and deleted from the database."}),"\n",(0,a.jsx)(n.p,{children:"Test database constraints, such as unique usernames or email addresses."}),"\n",(0,a.jsx)(n.h4,{id:"example-1",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'    def test_create_user():\n        user = User(username="test_user", email="test@example.com", password="securepassword123")\n        db.add(user)\n        db.commit()\n        assert db.query(User).filter(User.username == "test_user").first() is not None\n'})}),"\n",(0,a.jsx)(n.h3,{id:"business-logic",children:"Business Logic:"}),"\n",(0,a.jsx)(n.p,{children:"Test core application logic, such as password hashing, validation, and video processing."}),"\n",(0,a.jsx)(n.p,{children:"Ensure that edge cases (e.g., empty inputs, invalid formats) are handled gracefully."}),"\n",(0,a.jsx)(n.h4,{id:"example-2",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'    def test_password_hashing():\n        plain_password = "securepassword123"\n        hashed_password = hash_password(plain_password)\n        assert verify_password(plain_password, hashed_password) is True\n'})}),"\n",(0,a.jsx)(n.h2,{id:"frontend-components",children:"Frontend Components"}),"\n",(0,a.jsx)(n.h3,{id:"react-components",children:"React Components:"}),"\n",(0,a.jsx)(n.p,{children:"Test that components render correctly and display the expected content."}),"\n",(0,a.jsx)(n.p,{children:"Verify that components respond appropriately to user interactions (e.g., clicks, form submissions)."}),"\n",(0,a.jsx)(n.h4,{id:"example-3",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'    test("renders the login form", () => {\n        render(<LoginForm />);\n        const emailInput = screen.getByLabelText("Email");\n        const passwordInput = screen.getByLabelText("Password");\n        expect(emailInput).toBeInTheDocument();\n        expect(passwordInput).toBeInTheDocument();\n    });\n'})}),"\n",(0,a.jsx)(n.h3,{id:"state-management",children:"State Management:"}),"\n",(0,a.jsx)(n.p,{children:"Ensure that the application state updates correctly in response to user actions or API responses."}),"\n",(0,a.jsx)(n.p,{children:"Test edge cases, such as empty states or error conditions."}),"\n",(0,a.jsx)(n.h4,{id:"example-4",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'    test("updates state when a video is saved", () => {\n        const { getByText } = render(<VideoPage />);\n        fireEvent.click(getByText("Save"));\n        expect(getByText("Video saved successfully")).toBeInTheDocument();\n    });\n'})}),"\n",(0,a.jsx)(n.h3,{id:"api-integration",children:"API Integration:"}),"\n",(0,a.jsx)(n.p,{children:"Mock API responses to test how the frontend handles success, failure, and loading states."}),"\n",(0,a.jsx)(n.p,{children:"Ensure that the frontend correctly sends data to the backend and processes responses."}),"\n",(0,a.jsx)(n.h4,{id:"example-5",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'    test("displays an error message when login fails", async () => {\n        server.use(\n            rest.post("/login", (req, res, ctx) => {\n                return res(ctx.status(401), ctx.json({ error: "Invalid credentials" }));\n            })\n        );\n\n        render(<LoginForm />);\n        fireEvent.click(screen.getByText("Login"));\n        const errorMessage = await screen.findByText("Invalid credentials");\n        expect(errorMessage).toBeInTheDocument();\n    });\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(96540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);