"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[7837],{85374:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(74848),o=n(28453);const i={},s=void 0,c={id:"system-architecture/version-control",title:"version-control",description:"git b---",source:"@site/docs/system-architecture/version-control.md",sourceDirName:"system-architecture",slug:"/system-architecture/version-control",permalink:"/project-piggyback-learning-team-2/docs/system-architecture/version-control",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-piggyback-learning-team-2/edit/main/documentation/docs/system-architecture/version-control.md",tags:[],version:"current",lastUpdatedBy:"Gabriel Lantigua",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Development Environment",permalink:"/project-piggyback-learning-team-2/docs/system-architecture/development-environment"},next:{title:"API Specification",permalink:"/project-piggyback-learning-team-2/docs/category/api-specification"}},a={},l=[{value:"git b---\nsidebar_position: 5",id:"git-b---sidebar_position-5",level:2},{value:"Branch Protection",id:"branch-protection",level:2},{value:"Docusaurus Build",id:"docusaurus-build",level:2}];function d(e){const t={h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"git-b---sidebar_position-5",children:"git b---\nsidebar_position: 5"}),"\n",(0,r.jsx)(t.h1,{id:"version-control",children:"Version Control"}),"\n",(0,r.jsx)(t.p,{children:"This project will use Github and git for version control. The standard procedure for branch creation involves creating a branch from main, or from whichever exisitng branch is closest/most relevant to the intended functionality of the branch (for example, a branch focused on UI may branch from another branch focused on developing UI if those changes have not been merged to main yet so they can have a bigger picture of the UI to work with as the develop). The branches will be named based on the task or story the branch is working on, such as Landing_Page_UI or Question_Text_To_Speech."}),"\n",(0,r.jsx)(t.h2,{id:"branch-protection",children:"Branch Protection"}),"\n",(0,r.jsx)(t.p,{children:"This project has three rules for branch protection:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"A pull request is required to merge the contents of a branch with main."}),"\n",(0,r.jsx)(t.li,{children:"Two approvals of a pull request are required before merging of a branch is allowed."}),"\n",(0,r.jsx)(t.li,{children:"Only admins and users with bypass privileges can delete branches."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"docusaurus-build",children:"Docusaurus Build"}),"\n",(0,r.jsx)(t.p,{children:"The Docusaurus will be built from the gh-pages branch based on the contents of the main branch, using the text and configuration details from the Markdown and JSON files to build an HTML-based documentation website for this project."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(96540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);